/*
 * generated by Xtext 2.9.1
 */
package fmautorepair.ide.contentassist.antlr;

import com.google.inject.Inject;
import fmautorepair.ide.contentassist.antlr.internal.InternalKconfigParser;
import fmautorepair.services.KconfigGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class KconfigParser extends AbstractContentAssistParser {

	@Inject
	private KconfigGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalKconfigParser createParser() {
		InternalKconfigParser result = new InternalKconfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTypeAccess().getTypeAlternatives_1_0_0(), "rule__Type__TypeAlternatives_1_0_0");
					put(grammarAccess.getTypeAccess().getTypeAlternatives_2_0_0(), "rule__Type__TypeAlternatives_2_0_0");
					put(grammarAccess.getDefaultAccess().getAlternatives_1(), "rule__Default__Alternatives_1");
					put(grammarAccess.getDefaultAccess().getTrivalAlternatives_1_1_0(), "rule__Default__TrivalAlternatives_1_1_0");
					put(grammarAccess.getRangeAccess().getAlternatives_1(), "rule__Range__Alternatives_1");
					put(grammarAccess.getRangeAccess().getAlternatives_1_0_0(), "rule__Range__Alternatives_1_0_0");
					put(grammarAccess.getRangeAccess().getAlternatives_1_0_1(), "rule__Range__Alternatives_1_0_1");
					put(grammarAccess.getPrimaryLiteralAccess().getAlternatives(), "rule__PrimaryLiteral__Alternatives");
					put(grammarAccess.getConfigLiteralAccess().getAlternatives(), "rule__ConfigLiteral__Alternatives");
					put(grammarAccess.getConfigLiteralAccess().getAlternatives_0_2_0(), "rule__ConfigLiteral__Alternatives_0_2_0");
					put(grammarAccess.getConfigLiteralAccess().getAlternatives_0_2_1(), "rule__ConfigLiteral__Alternatives_0_2_1");
					put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getTypeAccess().getGroup_1_2(), "rule__Type__Group_1_2__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getTypeAccess().getGroup_2_2(), "rule__Type__Group_2_2__0");
					put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
					put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
					put(grammarAccess.getSelectAccess().getGroup_2(), "rule__Select__Group_2__0");
					put(grammarAccess.getDefaultAccess().getGroup(), "rule__Default__Group__0");
					put(grammarAccess.getDefaultAccess().getGroup_2(), "rule__Default__Group_2__0");
					put(grammarAccess.getPromptAccess().getGroup(), "rule__Prompt__Group__0");
					put(grammarAccess.getPromptAccess().getGroup_2(), "rule__Prompt__Group_2__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getRangeAccess().getGroup_1_0(), "rule__Range__Group_1_0__0");
					put(grammarAccess.getRangeAccess().getGroup_1_1(), "rule__Range__Group_1_1__0");
					put(grammarAccess.getRangeAccess().getGroup_2(), "rule__Range__Group_2__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getNeqLiteralAccess().getGroup(), "rule__NeqLiteral__Group__0");
					put(grammarAccess.getNeqLiteralAccess().getGroup_1(), "rule__NeqLiteral__Group_1__0");
					put(grammarAccess.getAndLiteralAccess().getGroup(), "rule__AndLiteral__Group__0");
					put(grammarAccess.getAndLiteralAccess().getGroup_1(), "rule__AndLiteral__Group_1__0");
					put(grammarAccess.getOrLiteralAccess().getGroup(), "rule__OrLiteral__Group__0");
					put(grammarAccess.getOrLiteralAccess().getGroup_1(), "rule__OrLiteral__Group_1__0");
					put(grammarAccess.getPrimaryLiteralAccess().getGroup_1(), "rule__PrimaryLiteral__Group_1__0");
					put(grammarAccess.getConfigLiteralAccess().getGroup_0(), "rule__ConfigLiteral__Group_0__0");
					put(grammarAccess.getConfigLiteralAccess().getGroup_0_2(), "rule__ConfigLiteral__Group_0_2__0");
					put(grammarAccess.getSIGNED_INTAccess().getGroup(), "rule__SIGNED_INT__Group__0");
					put(grammarAccess.getModelAccess().getChoicesAssignment_0(), "rule__Model__ChoicesAssignment_0");
					put(grammarAccess.getModelAccess().getSourcesAssignment_1(), "rule__Model__SourcesAssignment_1");
					put(grammarAccess.getModelAccess().getConfigsAssignment_2(), "rule__Model__ConfigsAssignment_2");
					put(grammarAccess.getChoiceAccess().getChoiceAssignment_0(), "rule__Choice__ChoiceAssignment_0");
					put(grammarAccess.getChoiceAccess().getConfigsAssignment_1(), "rule__Choice__ConfigsAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getConfigAccess().getNameAssignment_1(), "rule__Config__NameAssignment_1");
					put(grammarAccess.getConfigAccess().getTypeAssignment_2_0(), "rule__Config__TypeAssignment_2_0");
					put(grammarAccess.getConfigAccess().getPromptsAssignment_2_1(), "rule__Config__PromptsAssignment_2_1");
					put(grammarAccess.getConfigAccess().getRangesAssignment_2_2(), "rule__Config__RangesAssignment_2_2");
					put(grammarAccess.getConfigAccess().getDependenciesAssignment_2_3(), "rule__Config__DependenciesAssignment_2_3");
					put(grammarAccess.getConfigAccess().getSelectsAssignment_2_4(), "rule__Config__SelectsAssignment_2_4");
					put(grammarAccess.getConfigAccess().getDefaultsAssignment_2_5(), "rule__Config__DefaultsAssignment_2_5");
					put(grammarAccess.getTypeAccess().getTypeAssignment_0_0(), "rule__Type__TypeAssignment_0_0");
					put(grammarAccess.getTypeAccess().getTpromptAssignment_0_1(), "rule__Type__TpromptAssignment_0_1");
					put(grammarAccess.getTypeAccess().getTypeAssignment_1_0(), "rule__Type__TypeAssignment_1_0");
					put(grammarAccess.getTypeAccess().getTpromptAssignment_1_1(), "rule__Type__TpromptAssignment_1_1");
					put(grammarAccess.getTypeAccess().getKconfigExprAssignment_1_2_1(), "rule__Type__KconfigExprAssignment_1_2_1");
					put(grammarAccess.getTypeAccess().getTypeAssignment_2_0(), "rule__Type__TypeAssignment_2_0");
					put(grammarAccess.getTypeAccess().getDefAssignment_2_1(), "rule__Type__DefAssignment_2_1");
					put(grammarAccess.getTypeAccess().getKconfigExprAssignment_2_2_1(), "rule__Type__KconfigExprAssignment_2_2_1");
					put(grammarAccess.getDependencyAccess().getDepsAssignment_1(), "rule__Dependency__DepsAssignment_1");
					put(grammarAccess.getSelectAccess().getSelectAssignment_1(), "rule__Select__SelectAssignment_1");
					put(grammarAccess.getSelectAccess().getExprAssignment_2_1(), "rule__Select__ExprAssignment_2_1");
					put(grammarAccess.getDefaultAccess().getValueAssignment_1_0(), "rule__Default__ValueAssignment_1_0");
					put(grammarAccess.getDefaultAccess().getTrivalAssignment_1_1(), "rule__Default__TrivalAssignment_1_1");
					put(grammarAccess.getDefaultAccess().getHexAssignment_1_2(), "rule__Default__HexAssignment_1_2");
					put(grammarAccess.getDefaultAccess().getIntAssignment_1_3(), "rule__Default__IntAssignment_1_3");
					put(grammarAccess.getDefaultAccess().getKconfigExprAssignment_2_1(), "rule__Default__KconfigExprAssignment_2_1");
					put(grammarAccess.getPromptAccess().getValueAssignment_1(), "rule__Prompt__ValueAssignment_1");
					put(grammarAccess.getPromptAccess().getKconfigExprAssignment_2_1(), "rule__Prompt__KconfigExprAssignment_2_1");
					put(grammarAccess.getRangeAccess().getIfromAssignment_1_0_0_0(), "rule__Range__IfromAssignment_1_0_0_0");
					put(grammarAccess.getRangeAccess().getIconfromAssignment_1_0_0_1(), "rule__Range__IconfromAssignment_1_0_0_1");
					put(grammarAccess.getRangeAccess().getItoAssignment_1_0_1_0(), "rule__Range__ItoAssignment_1_0_1_0");
					put(grammarAccess.getRangeAccess().getIconftoAssignment_1_0_1_1(), "rule__Range__IconftoAssignment_1_0_1_1");
					put(grammarAccess.getRangeAccess().getHfromAssignment_1_1_0(), "rule__Range__HfromAssignment_1_1_0");
					put(grammarAccess.getRangeAccess().getHtoAssignment_1_1_1(), "rule__Range__HtoAssignment_1_1_1");
					put(grammarAccess.getRangeAccess().getKconfigExprAssignment_2_1(), "rule__Range__KconfigExprAssignment_2_1");
					put(grammarAccess.getExprAccess().getRightAssignment_1_2(), "rule__Expr__RightAssignment_1_2");
					put(grammarAccess.getNeqLiteralAccess().getRightAssignment_1_2(), "rule__NeqLiteral__RightAssignment_1_2");
					put(grammarAccess.getAndLiteralAccess().getRightAssignment_1_2(), "rule__AndLiteral__RightAssignment_1_2");
					put(grammarAccess.getOrLiteralAccess().getRightAssignment_1_2(), "rule__OrLiteral__RightAssignment_1_2");
					put(grammarAccess.getPrimaryLiteralAccess().getConfslitAssignment_0(), "rule__PrimaryLiteral__ConfslitAssignment_0");
					put(grammarAccess.getConfigLiteralAccess().getConfAssignment_0_1(), "rule__ConfigLiteral__ConfAssignment_0_1");
					put(grammarAccess.getConfigLiteralAccess().getStringAssignment_1(), "rule__ConfigLiteral__StringAssignment_1");
					put(grammarAccess.getConfigAccess().getUnorderedGroup_2(), "rule__Config__UnorderedGroup_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalKconfigParser typedParser = (InternalKconfigParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KconfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KconfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
