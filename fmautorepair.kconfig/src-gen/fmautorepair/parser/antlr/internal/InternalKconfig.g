/*
 * generated by Xtext 2.9.1
 */
grammar InternalKconfig;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fmautorepair.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fmautorepair.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fmautorepair.services.KconfigGrammarAccess;

}

@parser::members {

 	private KconfigGrammarAccess grammarAccess;

    public InternalKconfigParser(TokenStream input, KconfigGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected KconfigGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getChoicesChoiceParserRuleCall_0_0());
				}
				lv_Choices_0_0=ruleChoice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"Choices",
						lv_Choices_0_0,
						"fmautorepair.Kconfig.Choice");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSourcesImportParserRuleCall_1_0());
				}
				lv_Sources_1_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"Sources",
						lv_Sources_1_0,
						"fmautorepair.Kconfig.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConfigsConfigParserRuleCall_2_0());
				}
				lv_configs_2_0=ruleConfig
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"configs",
						lv_configs_2_0,
						"fmautorepair.Kconfig.Config");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	iv_ruleChoice=ruleChoice
	{ $current=$iv_ruleChoice.current; }
	EOF;

// Rule Choice
ruleChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_Choice_0_0='choice'
				{
					newLeafNode(lv_Choice_0_0, grammarAccess.getChoiceAccess().getChoiceChoiceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChoiceRule());
					}
					setWithLastConsumed($current, "Choice", lv_Choice_0_0, "choice");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChoiceAccess().getConfigsConfigParserRuleCall_1_0());
				}
				lv_configs_1_0=ruleConfig
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChoiceRule());
					}
					add(
						$current,
						"configs",
						lv_configs_1_0,
						"fmautorepair.Kconfig.Config");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='endchoice'
		{
			newLeafNode(otherlv_2, grammarAccess.getChoiceAccess().getEndchoiceKeyword_2());
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='source'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getSourceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					add(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"fmautorepair.Kconfig.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		kw='.Kconfig'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getKconfigKeyword_1());
		}
	)
;

// Entry rule entryRuleConfig
entryRuleConfig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigRule()); }
	iv_ruleConfig=ruleConfig
	{ $current=$iv_ruleConfig.current; }
	EOF;

// Rule Config
ruleConfig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='config'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigAccess().getConfigKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConfigAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"fmautorepair.Kconfig.ID");
				}
			)
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getConfigAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getConfigAccess().getTypeTypeParserRuleCall_2_0_0());
									}
									lv_type_3_0=ruleType
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getConfigRule());
										}
										set(
											$current,
											"type",
											lv_type_3_0,
											"fmautorepair.Kconfig.Type");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getConfigAccess().getPromptsPromptParserRuleCall_2_1_0());
									}
									lv_prompts_4_0=rulePrompt
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getConfigRule());
										}
										add(
											$current,
											"prompts",
											lv_prompts_4_0,
											"fmautorepair.Kconfig.Prompt");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getConfigAccess().getRangesRangeParserRuleCall_2_2_0());
									}
									lv_ranges_5_0=ruleRange
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getConfigRule());
										}
										add(
											$current,
											"ranges",
											lv_ranges_5_0,
											"fmautorepair.Kconfig.Range");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 3)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 3);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getConfigAccess().getDependenciesDependencyParserRuleCall_2_3_0());
									}
									lv_dependencies_6_0=ruleDependency
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getConfigRule());
										}
										add(
											$current,
											"dependencies",
											lv_dependencies_6_0,
											"fmautorepair.Kconfig.Dependency");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 4)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 4);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getConfigAccess().getSelectsSelectParserRuleCall_2_4_0());
									}
									lv_selects_7_0=ruleSelect
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getConfigRule());
										}
										add(
											$current,
											"selects",
											lv_selects_7_0,
											"fmautorepair.Kconfig.Select");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 5)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getConfigAccess().getUnorderedGroup_2(), 5);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getConfigAccess().getDefaultsDefaultParserRuleCall_2_5_0());
									}
									lv_defaults_8_0=ruleDefault
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getConfigRule());
										}
										add(
											$current,
											"defaults",
											lv_defaults_8_0,
											"fmautorepair.Kconfig.Default");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigAccess().getUnorderedGroup_2());
					}
				)
			)
					)+
					{getUnorderedGroupHelper().canLeave(grammarAccess.getConfigAccess().getUnorderedGroup_2())}?
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getConfigAccess().getUnorderedGroup_2());
				}
		)
		(
			this_KCONFIG_HELP_9=RULE_KCONFIG_HELP
			{
				newLeafNode(this_KCONFIG_HELP_9, grammarAccess.getConfigAccess().getKCONFIG_HELPTerminalRuleCall_3());
			}
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_type_0_0='string'
					{
						newLeafNode(lv_type_0_0, grammarAccess.getTypeAccess().getTypeStringKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "type", lv_type_0_0, "string");
					}
				)
			)
			(
				(
					lv_tprompt_1_0=RULE_STRING
					{
						newLeafNode(lv_tprompt_1_0, grammarAccess.getTypeAccess().getTpromptSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"tprompt",
							lv_tprompt_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)?
		)
		    |
		(
			(
				(
					(
						lv_type_2_1='bool'
						{
							newLeafNode(lv_type_2_1, grammarAccess.getTypeAccess().getTypeBoolKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTypeRule());
							}
							setWithLastConsumed($current, "type", lv_type_2_1, null);
						}
						    |
						lv_type_2_2='tristate'
						{
							newLeafNode(lv_type_2_2, grammarAccess.getTypeAccess().getTypeTristateKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTypeRule());
							}
							setWithLastConsumed($current, "type", lv_type_2_2, null);
						}
						    |
						lv_type_2_3='int'
						{
							newLeafNode(lv_type_2_3, grammarAccess.getTypeAccess().getTypeIntKeyword_1_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTypeRule());
							}
							setWithLastConsumed($current, "type", lv_type_2_3, null);
						}
						    |
						lv_type_2_4='hex'
						{
							newLeafNode(lv_type_2_4, grammarAccess.getTypeAccess().getTypeHexKeyword_1_0_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTypeRule());
							}
							setWithLastConsumed($current, "type", lv_type_2_4, null);
						}
					)
				)
			)
			(
				(
					lv_tprompt_3_0=RULE_STRING
					{
						newLeafNode(lv_tprompt_3_0, grammarAccess.getTypeAccess().getTpromptSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"tprompt",
							lv_tprompt_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)?
			(
				otherlv_4='if'
				{
					newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getIfKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeAccess().getKconfigExprExprParserRuleCall_1_2_1_0());
						}
						lv_KconfigExpr_5_0=ruleExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeRule());
							}
							set(
								$current,
								"KconfigExpr",
								lv_KconfigExpr_5_0,
								"fmautorepair.Kconfig.Expr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					(
						lv_type_6_1='def_bool'
						{
							newLeafNode(lv_type_6_1, grammarAccess.getTypeAccess().getTypeDef_boolKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTypeRule());
							}
							setWithLastConsumed($current, "type", lv_type_6_1, null);
						}
						    |
						lv_type_6_2='def_tristate'
						{
							newLeafNode(lv_type_6_2, grammarAccess.getTypeAccess().getTypeDef_tristateKeyword_2_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTypeRule());
							}
							setWithLastConsumed($current, "type", lv_type_6_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getDefExprParserRuleCall_2_1_0());
					}
					lv_def_7_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"def",
							lv_def_7_0,
							"fmautorepair.Kconfig.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8='if'
				{
					newLeafNode(otherlv_8, grammarAccess.getTypeAccess().getIfKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeAccess().getKconfigExprExprParserRuleCall_2_2_1_0());
						}
						lv_KconfigExpr_9_0=ruleExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeRule());
							}
							set(
								$current,
								"KconfigExpr",
								lv_KconfigExpr_9_0,
								"fmautorepair.Kconfig.Expr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='depends on'
		{
			newLeafNode(otherlv_0, grammarAccess.getDependencyAccess().getDependsOnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDependencyAccess().getDepsExprParserRuleCall_1_0());
				}
				lv_deps_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDependencyRule());
					}
					set(
						$current,
						"deps",
						lv_deps_1_0,
						"fmautorepair.Kconfig.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getSelectConfigCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='if'
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getIfKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectAccess().getExprExprParserRuleCall_2_1_0());
					}
					lv_Expr_3_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectRule());
						}
						set(
							$current,
							"Expr",
							lv_Expr_3_0,
							"fmautorepair.Kconfig.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDefault
entryRuleDefault returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultRule()); }
	iv_ruleDefault=ruleDefault
	{ $current=$iv_ruleDefault.current; }
	EOF;

// Rule Default
ruleDefault returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='default'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultAccess().getDefaultKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAccess().getValueExprParserRuleCall_1_0_0());
					}
					lv_value_1_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"fmautorepair.Kconfig.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						lv_trival_2_1='n'
						{
							newLeafNode(lv_trival_2_1, grammarAccess.getDefaultAccess().getTrivalNKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDefaultRule());
							}
							setWithLastConsumed($current, "trival", lv_trival_2_1, null);
						}
						    |
						lv_trival_2_2='m'
						{
							newLeafNode(lv_trival_2_2, grammarAccess.getDefaultAccess().getTrivalMKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDefaultRule());
							}
							setWithLastConsumed($current, "trival", lv_trival_2_2, null);
						}
						    |
						lv_trival_2_3='y'
						{
							newLeafNode(lv_trival_2_3, grammarAccess.getDefaultAccess().getTrivalYKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDefaultRule());
							}
							setWithLastConsumed($current, "trival", lv_trival_2_3, null);
						}
					)
				)
			)
			    |
			(
				(
					lv_hex_3_0=RULE_HEX_TERMINAL
					{
						newLeafNode(lv_hex_3_0, grammarAccess.getDefaultAccess().getHexHEX_TERMINALTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefaultRule());
						}
						setWithLastConsumed(
							$current,
							"hex",
							lv_hex_3_0,
							"fmautorepair.Kconfig.HEX_TERMINAL");
					}
				)
			)
			    |
			(
				(
					lv_int_4_0=RULE_INT
					{
						newLeafNode(lv_int_4_0, grammarAccess.getDefaultAccess().getIntINTTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefaultRule());
						}
						setWithLastConsumed(
							$current,
							"int",
							lv_int_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		(
			otherlv_5='if'
			{
				newLeafNode(otherlv_5, grammarAccess.getDefaultAccess().getIfKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefaultAccess().getKconfigExprExprParserRuleCall_2_1_0());
					}
					lv_KconfigExpr_6_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefaultRule());
						}
						set(
							$current,
							"KconfigExpr",
							lv_KconfigExpr_6_0,
							"fmautorepair.Kconfig.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePrompt
entryRulePrompt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPromptRule()); }
	iv_rulePrompt=rulePrompt
	{ $current=$iv_rulePrompt.current; }
	EOF;

// Rule Prompt
rulePrompt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='prompt'
		{
			newLeafNode(otherlv_0, grammarAccess.getPromptAccess().getPromptKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getPromptAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPromptRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='if'
			{
				newLeafNode(otherlv_2, grammarAccess.getPromptAccess().getIfKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPromptAccess().getKconfigExprExprParserRuleCall_2_1_0());
					}
					lv_KconfigExpr_3_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPromptRule());
						}
						set(
							$current,
							"KconfigExpr",
							lv_KconfigExpr_3_0,
							"fmautorepair.Kconfig.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='range'
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getRangeKeyword_0());
		}
		(
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getRangeAccess().getIfromSIGNED_INTParserRuleCall_1_0_0_0_0());
							}
							lv_ifrom_1_0=ruleSIGNED_INT
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRangeRule());
								}
								set(
									$current,
									"ifrom",
									lv_ifrom_1_0,
									"fmautorepair.Kconfig.SIGNED_INT");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRangeRule());
								}
							}
							otherlv_2=RULE_ID
							{
								newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getIconfromConfigCrossReference_1_0_0_1_0());
							}
						)
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getRangeAccess().getItoSIGNED_INTParserRuleCall_1_0_1_0_0());
							}
							lv_ito_3_0=ruleSIGNED_INT
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRangeRule());
								}
								set(
									$current,
									"ito",
									lv_ito_3_0,
									"fmautorepair.Kconfig.SIGNED_INT");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRangeRule());
								}
							}
							otherlv_4=RULE_ID
							{
								newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getIconftoConfigCrossReference_1_0_1_1_0());
							}
						)
					)
				)
			)
			    |
			(
				(
					(
						lv_hfrom_5_0=RULE_HEX_TERMINAL
						{
							newLeafNode(lv_hfrom_5_0, grammarAccess.getRangeAccess().getHfromHEX_TERMINALTerminalRuleCall_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRangeRule());
							}
							setWithLastConsumed(
								$current,
								"hfrom",
								lv_hfrom_5_0,
								"fmautorepair.Kconfig.HEX_TERMINAL");
						}
					)
				)
				(
					(
						lv_hto_6_0=RULE_HEX_TERMINAL
						{
							newLeafNode(lv_hto_6_0, grammarAccess.getRangeAccess().getHtoHEX_TERMINALTerminalRuleCall_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRangeRule());
							}
							setWithLastConsumed(
								$current,
								"hto",
								lv_hto_6_0,
								"fmautorepair.Kconfig.HEX_TERMINAL");
						}
					)
				)
			)
		)
		(
			otherlv_7='if'
			{
				newLeafNode(otherlv_7, grammarAccess.getRangeAccess().getIfKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeAccess().getKconfigExprExprParserRuleCall_2_1_0());
					}
					lv_KconfigExpr_8_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeRule());
						}
						set(
							$current,
							"KconfigExpr",
							lv_KconfigExpr_8_0,
							"fmautorepair.Kconfig.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprAccess().getNeqLiteralParserRuleCall_0());
		}
		this_NeqLiteral_0=ruleNeqLiteral
		{
			$current = $this_NeqLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExprAccess().getExprLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getExprAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprAccess().getRightNeqLiteralParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleNeqLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fmautorepair.Kconfig.NeqLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNeqLiteral
entryRuleNeqLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNeqLiteralRule()); }
	iv_ruleNeqLiteral=ruleNeqLiteral
	{ $current=$iv_ruleNeqLiteral.current; }
	EOF;

// Rule NeqLiteral
ruleNeqLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNeqLiteralAccess().getSecondaryLiteralParserRuleCall_0());
		}
		this_SecondaryLiteral_0=ruleSecondaryLiteral
		{
			$current = $this_SecondaryLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getNeqLiteralAccess().getNeqLiteralLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='!='
			{
				newLeafNode(otherlv_2, grammarAccess.getNeqLiteralAccess().getExclamationMarkEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNeqLiteralAccess().getRightSecondaryLiteralParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSecondaryLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNeqLiteralRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fmautorepair.Kconfig.SecondaryLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSecondaryLiteral
entryRuleSecondaryLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSecondaryLiteralRule()); }
	iv_ruleSecondaryLiteral=ruleSecondaryLiteral
	{ $current=$iv_ruleSecondaryLiteral.current; }
	EOF;

// Rule SecondaryLiteral
ruleSecondaryLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSecondaryLiteralAccess().getAndLiteralParserRuleCall());
	}
	this_AndLiteral_0=ruleAndLiteral
	{
		$current = $this_AndLiteral_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAndLiteral
entryRuleAndLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndLiteralRule()); }
	iv_ruleAndLiteral=ruleAndLiteral
	{ $current=$iv_ruleAndLiteral.current; }
	EOF;

// Rule AndLiteral
ruleAndLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndLiteralAccess().getOrLiteralParserRuleCall_0());
		}
		this_OrLiteral_0=ruleOrLiteral
		{
			$current = $this_OrLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndLiteralAccess().getAndLiteralLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndLiteralAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndLiteralAccess().getRightOrLiteralParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOrLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndLiteralRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fmautorepair.Kconfig.OrLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrLiteral
entryRuleOrLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrLiteralRule()); }
	iv_ruleOrLiteral=ruleOrLiteral
	{ $current=$iv_ruleOrLiteral.current; }
	EOF;

// Rule OrLiteral
ruleOrLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrLiteralAccess().getPrimaryLiteralParserRuleCall_0());
		}
		this_PrimaryLiteral_0=rulePrimaryLiteral
		{
			$current = $this_PrimaryLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrLiteralAccess().getOrLiteralLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrLiteralAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrLiteralAccess().getRightPrimaryLiteralParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrLiteralRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"fmautorepair.Kconfig.PrimaryLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryLiteral
entryRulePrimaryLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryLiteralRule()); }
	iv_rulePrimaryLiteral=rulePrimaryLiteral
	{ $current=$iv_rulePrimaryLiteral.current; }
	EOF;

// Rule PrimaryLiteral
rulePrimaryLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryLiteralAccess().getConfslitConfigLiteralParserRuleCall_0_0());
				}
				lv_confslit_0_0=ruleConfigLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryLiteralRule());
					}
					add(
						$current,
						"confslit",
						lv_confslit_0_0,
						"fmautorepair.Kconfig.ConfigLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				otherlv_1='!'
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimaryLiteralAccess().getExclamationMarkKeyword_1_0());
				}
			)?
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryLiteralAccess().getLeftParenthesisKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryLiteralAccess().getExprParserRuleCall_1_2());
			}
			this_Expr_3=ruleExpr
			{
				$current = $this_Expr_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryLiteralAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleConfigLiteral
entryRuleConfigLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigLiteralRule()); }
	iv_ruleConfigLiteral=ruleConfigLiteral
	{ $current=$iv_ruleConfigLiteral.current; }
	EOF;

// Rule ConfigLiteral
ruleConfigLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='!'
				{
					newLeafNode(otherlv_0, grammarAccess.getConfigLiteralAccess().getExclamationMarkKeyword_0_0());
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConfigLiteralRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getConfigLiteralAccess().getConfConfigCrossReference_0_1_0());
					}
				)
			)
			(
				(
					otherlv_2='='
					{
						newLeafNode(otherlv_2, grammarAccess.getConfigLiteralAccess().getEqualsSignKeyword_0_2_0_0());
					}
					    |
					otherlv_3='!='
					{
						newLeafNode(otherlv_3, grammarAccess.getConfigLiteralAccess().getExclamationMarkEqualsSignKeyword_0_2_0_1());
					}
				)
				(
					otherlv_4='y'
					{
						newLeafNode(otherlv_4, grammarAccess.getConfigLiteralAccess().getYKeyword_0_2_1_0());
					}
					    |
					otherlv_5='m'
					{
						newLeafNode(otherlv_5, grammarAccess.getConfigLiteralAccess().getMKeyword_0_2_1_1());
					}
					    |
					otherlv_6='n'
					{
						newLeafNode(otherlv_6, grammarAccess.getConfigLiteralAccess().getNKeyword_0_2_1_2());
					}
					    |
					this_INT_7=RULE_INT
					{
						newLeafNode(this_INT_7, grammarAccess.getConfigLiteralAccess().getINTTerminalRuleCall_0_2_1_3());
					}
				)
			)?
		)
		    |
		(
			(
				lv_string_8_0=RULE_STRING
				{
					newLeafNode(lv_string_8_0, grammarAccess.getConfigLiteralAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSIGNED_INT
entryRuleSIGNED_INT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSIGNED_INTRule()); }
	iv_ruleSIGNED_INT=ruleSIGNED_INT
	{ $current=$iv_ruleSIGNED_INT.current.getText(); }
	EOF;

// Rule SIGNED_INT
ruleSIGNED_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSIGNED_INTAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getSIGNED_INTAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : ('1'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' ('A'..'Z'|'a'..'z'|'_') ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*|'1'..'9' '0'..'9' '0'..'9' '0'..'9' ('A'..'Z'|'a'..'z'|'_') ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*|'0'..'9' '0'..'9' '0'..'9' ('A'..'Z'|'a'..'z'|'_') ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*|'1'..'9' '0'..'9' ('A'..'Z'|'a'..'z'|'_') ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*|'1'..'9' ('A'..'Z'|'a'..'z'|'_') ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*|('A'..'Z'|'a'..'z') ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*);

RULE_HEX_TERMINAL : '0x' ('0'..'9'|'a'..'f'|'A'..'F')*;

RULE_KCONFIG_HELP : '---help---' ( options {greedy=false;} : . )*'\n\n';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
