/**
 * generated by Xtext 2.9.1
 */
package fmautorepair.kconfig.impl;

import fmautorepair.kconfig.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KconfigFactoryImpl extends EFactoryImpl implements KconfigFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KconfigFactory init()
  {
    try
    {
      KconfigFactory theKconfigFactory = (KconfigFactory)EPackage.Registry.INSTANCE.getEFactory(KconfigPackage.eNS_URI);
      if (theKconfigFactory != null)
      {
        return theKconfigFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KconfigFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KconfigFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KconfigPackage.MODEL: return createModel();
      case KconfigPackage.CHOICE: return createChoice();
      case KconfigPackage.IMPORT: return createImport();
      case KconfigPackage.CONFIG: return createConfig();
      case KconfigPackage.TYPE: return createType();
      case KconfigPackage.DEPENDENCY: return createDependency();
      case KconfigPackage.SELECT: return createSelect();
      case KconfigPackage.DEFAULT: return createDefault();
      case KconfigPackage.PROMPT: return createPrompt();
      case KconfigPackage.RANGE: return createRange();
      case KconfigPackage.KCONFIG_EXPR: return createKconfigExpr();
      case KconfigPackage.CONFIG_LITERAL: return createConfigLiteral();
      case KconfigPackage.EXPR: return createExpr();
      case KconfigPackage.NEQ_LITERAL: return createNeqLiteral();
      case KconfigPackage.AND_LITERAL: return createAndLiteral();
      case KconfigPackage.OR_LITERAL: return createOrLiteral();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choice createChoice()
  {
    ChoiceImpl choice = new ChoiceImpl();
    return choice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Config createConfig()
  {
    ConfigImpl config = new ConfigImpl();
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Select createSelect()
  {
    SelectImpl select = new SelectImpl();
    return select;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Default createDefault()
  {
    DefaultImpl default_ = new DefaultImpl();
    return default_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prompt createPrompt()
  {
    PromptImpl prompt = new PromptImpl();
    return prompt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KconfigExpr createKconfigExpr()
  {
    KconfigExprImpl kconfigExpr = new KconfigExprImpl();
    return kconfigExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConfigLiteral createConfigLiteral()
  {
    ConfigLiteralImpl configLiteral = new ConfigLiteralImpl();
    return configLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NeqLiteral createNeqLiteral()
  {
    NeqLiteralImpl neqLiteral = new NeqLiteralImpl();
    return neqLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AndLiteral createAndLiteral()
  {
    AndLiteralImpl andLiteral = new AndLiteralImpl();
    return andLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrLiteral createOrLiteral()
  {
    OrLiteralImpl orLiteral = new OrLiteralImpl();
    return orLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KconfigPackage getKconfigPackage()
  {
    return (KconfigPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KconfigPackage getPackage()
  {
    return KconfigPackage.eINSTANCE;
  }

} //KconfigFactoryImpl
