/*
 * generated by Xtext 2.9.1
 */
package fmautorepair.serializer;

import com.google.inject.Inject;
import fmautorepair.services.KconfigGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class KconfigSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KconfigGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConfigLiteral_ExclamationMarkKeyword_0_0_q;
	protected AbstractElementAlias match_ConfigLiteral_____EqualsSignKeyword_0_2_0_0_or_ExclamationMarkEqualsSignKeyword_0_2_0_1_____INTTerminalRuleCall_0_2_1_3_or_MKeyword_0_2_1_1_or_NKeyword_0_2_1_2_or_YKeyword_0_2_1_0____q;
	protected AbstractElementAlias match_Config_KCONFIG_HELPTerminalRuleCall_3_q;
	protected AbstractElementAlias match_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a;
	protected AbstractElementAlias match_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KconfigGrammarAccess) access;
		match_ConfigLiteral_ExclamationMarkKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getConfigLiteralAccess().getExclamationMarkKeyword_0_0());
		match_ConfigLiteral_____EqualsSignKeyword_0_2_0_0_or_ExclamationMarkEqualsSignKeyword_0_2_0_1_____INTTerminalRuleCall_0_2_1_3_or_MKeyword_0_2_1_1_or_NKeyword_0_2_1_2_or_YKeyword_0_2_1_0____q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConfigLiteralAccess().getEqualsSignKeyword_0_2_0_0()), new TokenAlias(false, false, grammarAccess.getConfigLiteralAccess().getExclamationMarkEqualsSignKeyword_0_2_0_1())), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConfigLiteralAccess().getINTTerminalRuleCall_0_2_1_3()), new TokenAlias(false, false, grammarAccess.getConfigLiteralAccess().getMKeyword_0_2_1_1()), new TokenAlias(false, false, grammarAccess.getConfigLiteralAccess().getNKeyword_0_2_1_2()), new TokenAlias(false, false, grammarAccess.getConfigLiteralAccess().getYKeyword_0_2_1_0())));
		match_Config_KCONFIG_HELPTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getConfigAccess().getKCONFIG_HELPTerminalRuleCall_3());
		match_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getPrimaryLiteralAccess().getExclamationMarkKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryLiteralAccess().getLeftParenthesisKeyword_1_1()));
		match_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getPrimaryLiteralAccess().getExclamationMarkKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryLiteralAccess().getLeftParenthesisKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getKCONFIG_HELPRule())
			return getKCONFIG_HELPToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal KCONFIG_HELP: '---help---' -> "\n\n";
	 */
	protected String getKCONFIG_HELPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "---help---";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConfigLiteral_ExclamationMarkKeyword_0_0_q.equals(syntax))
				emit_ConfigLiteral_ExclamationMarkKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConfigLiteral_____EqualsSignKeyword_0_2_0_0_or_ExclamationMarkEqualsSignKeyword_0_2_0_1_____INTTerminalRuleCall_0_2_1_3_or_MKeyword_0_2_1_1_or_NKeyword_0_2_1_2_or_YKeyword_0_2_1_0____q.equals(syntax))
				emit_ConfigLiteral_____EqualsSignKeyword_0_2_0_0_or_ExclamationMarkEqualsSignKeyword_0_2_0_1_____INTTerminalRuleCall_0_2_1_3_or_MKeyword_0_2_1_1_or_NKeyword_0_2_1_2_or_YKeyword_0_2_1_0____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Config_KCONFIG_HELPTerminalRuleCall_3_q.equals(syntax))
				emit_Config_KCONFIG_HELPTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a.equals(syntax))
				emit_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p.equals(syntax))
				emit_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) conf=[Config|ID]
	 */
	protected void emit_ConfigLiteral_ExclamationMarkKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (('=' | '!=') ('y' | 'm' | 'n' | INT))?
	 *
	 * This ambiguous syntax occurs at:
	 *     conf=[Config|ID] (ambiguity) (rule end)
	 */
	protected void emit_ConfigLiteral_____EqualsSignKeyword_0_2_0_0_or_ExclamationMarkEqualsSignKeyword_0_2_0_1_____INTTerminalRuleCall_0_2_1_3_or_MKeyword_0_2_1_1_or_NKeyword_0_2_1_2_or_YKeyword_0_2_1_0____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     KCONFIG_HELP?
	 *
	 * This ambiguous syntax occurs at:
	 *     defaults+=Default (ambiguity) (rule end)
	 *     dependencies+=Dependency (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     prompts+=Prompt (ambiguity) (rule end)
	 *     ranges+=Range (ambiguity) (rule end)
	 *     selects+=Select (ambiguity) (rule end)
	 *     type=Type (ambiguity) (rule end)
	 */
	protected void emit_Config_KCONFIG_HELPTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('!'? '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) confslit+=ConfigLiteral
	 *     (rule start) (ambiguity) {AndLiteral.left=}
	 *     (rule start) (ambiguity) {Expr.left=}
	 *     (rule start) (ambiguity) {NeqLiteral.left=}
	 *     (rule start) (ambiguity) {OrLiteral.left=}
	 */
	protected void emit_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('!'? '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {AndLiteral.left=}
	 *     (rule start) (ambiguity) {Expr.left=}
	 *     (rule start) (ambiguity) {NeqLiteral.left=}
	 *     (rule start) (ambiguity) {OrLiteral.left=}
	 */
	protected void emit_PrimaryLiteral___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
