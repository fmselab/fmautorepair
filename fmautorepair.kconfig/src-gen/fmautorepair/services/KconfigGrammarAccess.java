/*
 * generated by Xtext 2.9.1
 */
package fmautorepair.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KconfigGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cChoicesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cChoicesChoiceParserRuleCall_0_0 = (RuleCall)cChoicesAssignment_0.eContents().get(0);
		private final Assignment cSourcesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSourcesImportParserRuleCall_1_0 = (RuleCall)cSourcesAssignment_1.eContents().get(0);
		private final Assignment cConfigsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConfigsConfigParserRuleCall_2_0 = (RuleCall)cConfigsAssignment_2.eContents().get(0);
		
		//Model:
		//	(Choices+=Choice | Sources+=Import | configs+=Config)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Choices+=Choice | Sources+=Import | configs+=Config)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Choices+=Choice
		public Assignment getChoicesAssignment_0() { return cChoicesAssignment_0; }
		
		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_0_0() { return cChoicesChoiceParserRuleCall_0_0; }
		
		//Sources+=Import
		public Assignment getSourcesAssignment_1() { return cSourcesAssignment_1; }
		
		//Import
		public RuleCall getSourcesImportParserRuleCall_1_0() { return cSourcesImportParserRuleCall_1_0; }
		
		//configs+=Config
		public Assignment getConfigsAssignment_2() { return cConfigsAssignment_2; }
		
		//Config
		public RuleCall getConfigsConfigParserRuleCall_2_0() { return cConfigsConfigParserRuleCall_2_0; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChoiceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cChoiceChoiceKeyword_0_0 = (Keyword)cChoiceAssignment_0.eContents().get(0);
		private final Assignment cConfigsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigsConfigParserRuleCall_1_0 = (RuleCall)cConfigsAssignment_1.eContents().get(0);
		private final Keyword cEndchoiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Choice:
		//	Choice='choice' configs+=Config+ 'endchoice';
		@Override public ParserRule getRule() { return rule; }
		
		//Choice='choice' configs+=Config+ 'endchoice'
		public Group getGroup() { return cGroup; }
		
		//Choice='choice'
		public Assignment getChoiceAssignment_0() { return cChoiceAssignment_0; }
		
		//'choice'
		public Keyword getChoiceChoiceKeyword_0_0() { return cChoiceChoiceKeyword_0_0; }
		
		//configs+=Config+
		public Assignment getConfigsAssignment_1() { return cConfigsAssignment_1; }
		
		//Config
		public RuleCall getConfigsConfigParserRuleCall_1_0() { return cConfigsConfigParserRuleCall_1_0; }
		
		//'endchoice'
		public Keyword getEndchoiceKeyword_2() { return cEndchoiceKeyword_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'source' importedNamespace+=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'source' importedNamespace+=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//importedNamespace+=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cKconfigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedName:
		//	ID '.Kconfig';
		@Override public ParserRule getRule() { return rule; }
		
		//ID '.Kconfig'
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'.Kconfig'
		public Keyword getKconfigKeyword_1() { return cKconfigKeyword_1; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cPromptsAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cPromptsPromptParserRuleCall_2_1_0 = (RuleCall)cPromptsAssignment_2_1.eContents().get(0);
		private final Assignment cRangesAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cRangesRangeParserRuleCall_2_2_0 = (RuleCall)cRangesAssignment_2_2.eContents().get(0);
		private final Assignment cDependenciesAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cDependenciesDependencyParserRuleCall_2_3_0 = (RuleCall)cDependenciesAssignment_2_3.eContents().get(0);
		private final Assignment cSelectsAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cSelectsSelectParserRuleCall_2_4_0 = (RuleCall)cSelectsAssignment_2_4.eContents().get(0);
		private final Assignment cDefaultsAssignment_2_5 = (Assignment)cUnorderedGroup_2.eContents().get(5);
		private final RuleCall cDefaultsDefaultParserRuleCall_2_5_0 = (RuleCall)cDefaultsAssignment_2_5.eContents().get(0);
		private final RuleCall cKCONFIG_HELPTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Config:
		//	'config' name=ID (type=Type & prompts+=Prompt? & ranges+=Range* & dependencies+=Dependency* & selects+=Select* &
		//	defaults+=Default*) KCONFIG_HELP?;
		@Override public ParserRule getRule() { return rule; }
		
		//'config' name=ID (type=Type & prompts+=Prompt? & ranges+=Range* & dependencies+=Dependency* & selects+=Select* &
		//defaults+=Default*) KCONFIG_HELP?
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(type=Type & prompts+=Prompt? & ranges+=Range* & dependencies+=Dependency* & selects+=Select* & defaults+=Default*)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//type=Type
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_0() { return cTypeTypeParserRuleCall_2_0_0; }
		
		//prompts+=Prompt?
		public Assignment getPromptsAssignment_2_1() { return cPromptsAssignment_2_1; }
		
		//Prompt
		public RuleCall getPromptsPromptParserRuleCall_2_1_0() { return cPromptsPromptParserRuleCall_2_1_0; }
		
		//ranges+=Range*
		public Assignment getRangesAssignment_2_2() { return cRangesAssignment_2_2; }
		
		//Range
		public RuleCall getRangesRangeParserRuleCall_2_2_0() { return cRangesRangeParserRuleCall_2_2_0; }
		
		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_2_3() { return cDependenciesAssignment_2_3; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_2_3_0() { return cDependenciesDependencyParserRuleCall_2_3_0; }
		
		//selects+=Select*
		public Assignment getSelectsAssignment_2_4() { return cSelectsAssignment_2_4; }
		
		//Select
		public RuleCall getSelectsSelectParserRuleCall_2_4_0() { return cSelectsSelectParserRuleCall_2_4_0; }
		
		//defaults+=Default*
		public Assignment getDefaultsAssignment_2_5() { return cDefaultsAssignment_2_5; }
		
		//Default
		public RuleCall getDefaultsDefaultParserRuleCall_2_5_0() { return cDefaultsDefaultParserRuleCall_2_5_0; }
		
		//KCONFIG_HELP?
		public RuleCall getKCONFIG_HELPTerminalRuleCall_3() { return cKCONFIG_HELPTerminalRuleCall_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cTpromptAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTpromptSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cTpromptAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cTypeAlternatives_1_0_0 = (Alternatives)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cTypeBoolKeyword_1_0_0_0 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(0);
		private final Keyword cTypeTristateKeyword_1_0_0_1 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(1);
		private final Keyword cTypeIntKeyword_1_0_0_2 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(2);
		private final Keyword cTypeHexKeyword_1_0_0_3 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(3);
		private final Assignment cTpromptAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTpromptSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTpromptAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cIfKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cKconfigExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cKconfigExprExprParserRuleCall_1_2_1_0 = (RuleCall)cKconfigExprAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cTypeAlternatives_2_0_0 = (Alternatives)cTypeAssignment_2_0.eContents().get(0);
		private final Keyword cTypeDef_boolKeyword_2_0_0_0 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(0);
		private final Keyword cTypeDef_tristateKeyword_2_0_0_1 = (Keyword)cTypeAlternatives_2_0_0.eContents().get(1);
		private final Assignment cDefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefExprParserRuleCall_2_1_0 = (RuleCall)cDefAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cIfKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cKconfigExprAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cKconfigExprExprParserRuleCall_2_2_1_0 = (RuleCall)cKconfigExprAssignment_2_2_1.eContents().get(0);
		
		//Type:
		//	type='string' tprompt=STRING? | type=('bool' | 'tristate' | 'int' | 'hex') tprompt=STRING? ('if' KconfigExpr=Expr)? |
		//	type=('def_bool' | 'def_tristate') def=Expr ('if' KconfigExpr=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type='string' tprompt=STRING? | type=('bool' | 'tristate' | 'int' | 'hex') tprompt=STRING? ('if' KconfigExpr=Expr)? |
		//type=('def_bool' | 'def_tristate') def=Expr ('if' KconfigExpr=Expr)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='string' tprompt=STRING?
		public Group getGroup_0() { return cGroup_0; }
		
		//type='string'
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//'string'
		public Keyword getTypeStringKeyword_0_0_0() { return cTypeStringKeyword_0_0_0; }
		
		//tprompt=STRING?
		public Assignment getTpromptAssignment_0_1() { return cTpromptAssignment_0_1; }
		
		//STRING
		public RuleCall getTpromptSTRINGTerminalRuleCall_0_1_0() { return cTpromptSTRINGTerminalRuleCall_0_1_0; }
		
		//type=('bool' | 'tristate' | 'int' | 'hex') tprompt=STRING? ('if' KconfigExpr=Expr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=('bool' | 'tristate' | 'int' | 'hex')
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//('bool' | 'tristate' | 'int' | 'hex')
		public Alternatives getTypeAlternatives_1_0_0() { return cTypeAlternatives_1_0_0; }
		
		//'bool'
		public Keyword getTypeBoolKeyword_1_0_0_0() { return cTypeBoolKeyword_1_0_0_0; }
		
		//'tristate'
		public Keyword getTypeTristateKeyword_1_0_0_1() { return cTypeTristateKeyword_1_0_0_1; }
		
		//'int'
		public Keyword getTypeIntKeyword_1_0_0_2() { return cTypeIntKeyword_1_0_0_2; }
		
		//'hex'
		public Keyword getTypeHexKeyword_1_0_0_3() { return cTypeHexKeyword_1_0_0_3; }
		
		//tprompt=STRING?
		public Assignment getTpromptAssignment_1_1() { return cTpromptAssignment_1_1; }
		
		//STRING
		public RuleCall getTpromptSTRINGTerminalRuleCall_1_1_0() { return cTpromptSTRINGTerminalRuleCall_1_1_0; }
		
		//('if' KconfigExpr=Expr)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'if'
		public Keyword getIfKeyword_1_2_0() { return cIfKeyword_1_2_0; }
		
		//KconfigExpr=Expr
		public Assignment getKconfigExprAssignment_1_2_1() { return cKconfigExprAssignment_1_2_1; }
		
		//Expr
		public RuleCall getKconfigExprExprParserRuleCall_1_2_1_0() { return cKconfigExprExprParserRuleCall_1_2_1_0; }
		
		//type=('def_bool' | 'def_tristate') def=Expr ('if' KconfigExpr=Expr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//type=('def_bool' | 'def_tristate')
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//('def_bool' | 'def_tristate')
		public Alternatives getTypeAlternatives_2_0_0() { return cTypeAlternatives_2_0_0; }
		
		//'def_bool'
		public Keyword getTypeDef_boolKeyword_2_0_0_0() { return cTypeDef_boolKeyword_2_0_0_0; }
		
		//'def_tristate'
		public Keyword getTypeDef_tristateKeyword_2_0_0_1() { return cTypeDef_tristateKeyword_2_0_0_1; }
		
		//def=Expr
		public Assignment getDefAssignment_2_1() { return cDefAssignment_2_1; }
		
		//Expr
		public RuleCall getDefExprParserRuleCall_2_1_0() { return cDefExprParserRuleCall_2_1_0; }
		
		//('if' KconfigExpr=Expr)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'if'
		public Keyword getIfKeyword_2_2_0() { return cIfKeyword_2_2_0; }
		
		//KconfigExpr=Expr
		public Assignment getKconfigExprAssignment_2_2_1() { return cKconfigExprAssignment_2_2_1; }
		
		//Expr
		public RuleCall getKconfigExprExprParserRuleCall_2_2_1_0() { return cKconfigExprExprParserRuleCall_2_2_1_0; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDepsExprParserRuleCall_1_0 = (RuleCall)cDepsAssignment_1.eContents().get(0);
		
		//Dependency:
		//	'depends on' deps=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on' deps=Expr
		public Group getGroup() { return cGroup; }
		
		//'depends on'
		public Keyword getDependsOnKeyword_0() { return cDependsOnKeyword_0; }
		
		//deps=Expr
		public Assignment getDepsAssignment_1() { return cDepsAssignment_1; }
		
		//Expr
		public RuleCall getDepsExprParserRuleCall_1_0() { return cDepsExprParserRuleCall_1_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSelectConfigCrossReference_1_0 = (CrossReference)cSelectAssignment_1.eContents().get(0);
		private final RuleCall cSelectConfigIDTerminalRuleCall_1_0_1 = (RuleCall)cSelectConfigCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//Select:
		//	'select' select=[Config] ('if' Expr=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' select=[Config] ('if' Expr=Expr)?
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//select=[Config]
		public Assignment getSelectAssignment_1() { return cSelectAssignment_1; }
		
		//[Config]
		public CrossReference getSelectConfigCrossReference_1_0() { return cSelectConfigCrossReference_1_0; }
		
		//ID
		public RuleCall getSelectConfigIDTerminalRuleCall_1_0_1() { return cSelectConfigIDTerminalRuleCall_1_0_1; }
		
		//('if' Expr=Expr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//Expr=Expr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_1_0() { return cExprExprParserRuleCall_2_1_0; }
	}
	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueExprParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cTrivalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Alternatives cTrivalAlternatives_1_1_0 = (Alternatives)cTrivalAssignment_1_1.eContents().get(0);
		private final Keyword cTrivalNKeyword_1_1_0_0 = (Keyword)cTrivalAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTrivalMKeyword_1_1_0_1 = (Keyword)cTrivalAlternatives_1_1_0.eContents().get(1);
		private final Keyword cTrivalYKeyword_1_1_0_2 = (Keyword)cTrivalAlternatives_1_1_0.eContents().get(2);
		private final Assignment cHexAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cHexHEX_TERMINALTerminalRuleCall_1_2_0 = (RuleCall)cHexAssignment_1_2.eContents().get(0);
		private final Assignment cIntAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cIntINTTerminalRuleCall_1_3_0 = (RuleCall)cIntAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKconfigExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKconfigExprExprParserRuleCall_2_1_0 = (RuleCall)cKconfigExprAssignment_2_1.eContents().get(0);
		
		//Default:
		//	'default' (value=Expr | trival=('n' | 'm' | 'y') | hex=HEX_TERMINAL | int=INT) ('if' KconfigExpr=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'default' (value=Expr | trival=('n' | 'm' | 'y') | hex=HEX_TERMINAL | int=INT) ('if' KconfigExpr=Expr)?
		public Group getGroup() { return cGroup; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//(value=Expr | trival=('n' | 'm' | 'y') | hex=HEX_TERMINAL | int=INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=Expr
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_1_0_0() { return cValueExprParserRuleCall_1_0_0; }
		
		//trival=('n' | 'm' | 'y')
		public Assignment getTrivalAssignment_1_1() { return cTrivalAssignment_1_1; }
		
		//('n' | 'm' | 'y')
		public Alternatives getTrivalAlternatives_1_1_0() { return cTrivalAlternatives_1_1_0; }
		
		//'n'
		public Keyword getTrivalNKeyword_1_1_0_0() { return cTrivalNKeyword_1_1_0_0; }
		
		//'m'
		public Keyword getTrivalMKeyword_1_1_0_1() { return cTrivalMKeyword_1_1_0_1; }
		
		//'y'
		public Keyword getTrivalYKeyword_1_1_0_2() { return cTrivalYKeyword_1_1_0_2; }
		
		//hex=HEX_TERMINAL
		public Assignment getHexAssignment_1_2() { return cHexAssignment_1_2; }
		
		//HEX_TERMINAL
		public RuleCall getHexHEX_TERMINALTerminalRuleCall_1_2_0() { return cHexHEX_TERMINALTerminalRuleCall_1_2_0; }
		
		//int=INT
		public Assignment getIntAssignment_1_3() { return cIntAssignment_1_3; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_1_3_0() { return cIntINTTerminalRuleCall_1_3_0; }
		
		//('if' KconfigExpr=Expr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//KconfigExpr=Expr
		public Assignment getKconfigExprAssignment_2_1() { return cKconfigExprAssignment_2_1; }
		
		//Expr
		public RuleCall getKconfigExprExprParserRuleCall_2_1_0() { return cKconfigExprExprParserRuleCall_2_1_0; }
	}
	public class PromptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Prompt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPromptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKconfigExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKconfigExprExprParserRuleCall_2_1_0 = (RuleCall)cKconfigExprAssignment_2_1.eContents().get(0);
		
		//Prompt:
		//	'prompt' value=STRING ('if' KconfigExpr=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'prompt' value=STRING ('if' KconfigExpr=Expr)?
		public Group getGroup() { return cGroup; }
		
		//'prompt'
		public Keyword getPromptKeyword_0() { return cPromptKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//('if' KconfigExpr=Expr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//KconfigExpr=Expr
		public Assignment getKconfigExprAssignment_2_1() { return cKconfigExprAssignment_2_1; }
		
		//Expr
		public RuleCall getKconfigExprExprParserRuleCall_2_1_0() { return cKconfigExprExprParserRuleCall_2_1_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cIfromAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cIfromSIGNED_INTParserRuleCall_1_0_0_0_0 = (RuleCall)cIfromAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cIconfromAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final CrossReference cIconfromConfigCrossReference_1_0_0_1_0 = (CrossReference)cIconfromAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cIconfromConfigIDTerminalRuleCall_1_0_0_1_0_1 = (RuleCall)cIconfromConfigCrossReference_1_0_0_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cItoAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cItoSIGNED_INTParserRuleCall_1_0_1_0_0 = (RuleCall)cItoAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cIconftoAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final CrossReference cIconftoConfigCrossReference_1_0_1_1_0 = (CrossReference)cIconftoAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cIconftoConfigIDTerminalRuleCall_1_0_1_1_0_1 = (RuleCall)cIconftoConfigCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cHfromAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cHfromHEX_TERMINALTerminalRuleCall_1_1_0_0 = (RuleCall)cHfromAssignment_1_1_0.eContents().get(0);
		private final Assignment cHtoAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cHtoHEX_TERMINALTerminalRuleCall_1_1_1_0 = (RuleCall)cHtoAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKconfigExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKconfigExprExprParserRuleCall_2_1_0 = (RuleCall)cKconfigExprAssignment_2_1.eContents().get(0);
		
		////
		//Range:
		//	'range' ((ifrom=SIGNED_INT | iconfrom=[Config]) (ito=SIGNED_INT | iconfto=[Config]) | hfrom=HEX_TERMINAL
		//	hto=HEX_TERMINAL) ('if' KconfigExpr=Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'range' ((ifrom=SIGNED_INT | iconfrom=[Config]) (ito=SIGNED_INT | iconfto=[Config]) | hfrom=HEX_TERMINAL
		//hto=HEX_TERMINAL) ('if' KconfigExpr=Expr)?
		public Group getGroup() { return cGroup; }
		
		//'range'
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//((ifrom=SIGNED_INT | iconfrom=[Config]) (ito=SIGNED_INT | iconfto=[Config]) | hfrom=HEX_TERMINAL hto=HEX_TERMINAL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(ifrom=SIGNED_INT | iconfrom=[Config]) (ito=SIGNED_INT | iconfto=[Config])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(ifrom=SIGNED_INT | iconfrom=[Config])
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//ifrom=SIGNED_INT
		public Assignment getIfromAssignment_1_0_0_0() { return cIfromAssignment_1_0_0_0; }
		
		//SIGNED_INT
		public RuleCall getIfromSIGNED_INTParserRuleCall_1_0_0_0_0() { return cIfromSIGNED_INTParserRuleCall_1_0_0_0_0; }
		
		//iconfrom=[Config]
		public Assignment getIconfromAssignment_1_0_0_1() { return cIconfromAssignment_1_0_0_1; }
		
		//[Config]
		public CrossReference getIconfromConfigCrossReference_1_0_0_1_0() { return cIconfromConfigCrossReference_1_0_0_1_0; }
		
		//ID
		public RuleCall getIconfromConfigIDTerminalRuleCall_1_0_0_1_0_1() { return cIconfromConfigIDTerminalRuleCall_1_0_0_1_0_1; }
		
		//(ito=SIGNED_INT | iconfto=[Config])
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//ito=SIGNED_INT
		public Assignment getItoAssignment_1_0_1_0() { return cItoAssignment_1_0_1_0; }
		
		//SIGNED_INT
		public RuleCall getItoSIGNED_INTParserRuleCall_1_0_1_0_0() { return cItoSIGNED_INTParserRuleCall_1_0_1_0_0; }
		
		//iconfto=[Config]
		public Assignment getIconftoAssignment_1_0_1_1() { return cIconftoAssignment_1_0_1_1; }
		
		//[Config]
		public CrossReference getIconftoConfigCrossReference_1_0_1_1_0() { return cIconftoConfigCrossReference_1_0_1_1_0; }
		
		//ID
		public RuleCall getIconftoConfigIDTerminalRuleCall_1_0_1_1_0_1() { return cIconftoConfigIDTerminalRuleCall_1_0_1_1_0_1; }
		
		//hfrom=HEX_TERMINAL hto=HEX_TERMINAL
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//hfrom=HEX_TERMINAL
		public Assignment getHfromAssignment_1_1_0() { return cHfromAssignment_1_1_0; }
		
		//HEX_TERMINAL
		public RuleCall getHfromHEX_TERMINALTerminalRuleCall_1_1_0_0() { return cHfromHEX_TERMINALTerminalRuleCall_1_1_0_0; }
		
		//hto=HEX_TERMINAL
		public Assignment getHtoAssignment_1_1_1() { return cHtoAssignment_1_1_1; }
		
		//HEX_TERMINAL
		public RuleCall getHtoHEX_TERMINALTerminalRuleCall_1_1_1_0() { return cHtoHEX_TERMINALTerminalRuleCall_1_1_1_0; }
		
		//('if' KconfigExpr=Expr)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//KconfigExpr=Expr
		public Assignment getKconfigExprAssignment_2_1() { return cKconfigExprAssignment_2_1; }
		
		//Expr
		public RuleCall getKconfigExprExprParserRuleCall_2_1_0() { return cKconfigExprExprParserRuleCall_2_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNeqLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNeqLiteralParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expr KconfigExpr:
		//	NeqLiteral ({Expr.left=current} '=' right=NeqLiteral)*
		@Override public ParserRule getRule() { return rule; }
		
		//NeqLiteral ({Expr.left=current} '=' right=NeqLiteral)*
		public Group getGroup() { return cGroup; }
		
		//NeqLiteral
		public RuleCall getNeqLiteralParserRuleCall_0() { return cNeqLiteralParserRuleCall_0; }
		
		//({Expr.left=current} '=' right=NeqLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expr.left=current}
		public Action getExprLeftAction_1_0() { return cExprLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=NeqLiteral
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NeqLiteral
		public RuleCall getRightNeqLiteralParserRuleCall_1_2_0() { return cRightNeqLiteralParserRuleCall_1_2_0; }
	}
	public class NeqLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.NeqLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSecondaryLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNeqLiteralLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSecondaryLiteralParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//NeqLiteral KconfigExpr:
		//	SecondaryLiteral ({NeqLiteral.left=current} '!=' right=SecondaryLiteral)*
		@Override public ParserRule getRule() { return rule; }
		
		//SecondaryLiteral ({NeqLiteral.left=current} '!=' right=SecondaryLiteral)*
		public Group getGroup() { return cGroup; }
		
		//SecondaryLiteral
		public RuleCall getSecondaryLiteralParserRuleCall_0() { return cSecondaryLiteralParserRuleCall_0; }
		
		//({NeqLiteral.left=current} '!=' right=SecondaryLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{NeqLiteral.left=current}
		public Action getNeqLiteralLeftAction_1_0() { return cNeqLiteralLeftAction_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
		
		//right=SecondaryLiteral
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SecondaryLiteral
		public RuleCall getRightSecondaryLiteralParserRuleCall_1_2_0() { return cRightSecondaryLiteralParserRuleCall_1_2_0; }
	}
	public class SecondaryLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.SecondaryLiteral");
		private final RuleCall cAndLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SecondaryLiteral KconfigExpr:
		//	AndLiteral
		@Override public ParserRule getRule() { return rule; }
		
		//AndLiteral
		public RuleCall getAndLiteralParserRuleCall() { return cAndLiteralParserRuleCall; }
	}
	public class AndLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.AndLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLiteralLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrLiteralParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndLiteral KconfigExpr:
		//	OrLiteral ({AndLiteral.left=current} '&&' right=OrLiteral)*
		@Override public ParserRule getRule() { return rule; }
		
		//OrLiteral ({AndLiteral.left=current} '&&' right=OrLiteral)*
		public Group getGroup() { return cGroup; }
		
		//OrLiteral
		public RuleCall getOrLiteralParserRuleCall_0() { return cOrLiteralParserRuleCall_0; }
		
		//({AndLiteral.left=current} '&&' right=OrLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndLiteral.left=current}
		public Action getAndLiteralLeftAction_1_0() { return cAndLiteralLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=OrLiteral
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//OrLiteral
		public RuleCall getRightOrLiteralParserRuleCall_1_2_0() { return cRightOrLiteralParserRuleCall_1_2_0; }
	}
	public class OrLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.OrLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLiteralLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryLiteralParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrLiteral KconfigExpr:
		//	PrimaryLiteral ({OrLiteral.left=current} '||' right=PrimaryLiteral)*
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryLiteral ({OrLiteral.left=current} '||' right=PrimaryLiteral)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryLiteral
		public RuleCall getPrimaryLiteralParserRuleCall_0() { return cPrimaryLiteralParserRuleCall_0; }
		
		//({OrLiteral.left=current} '||' right=PrimaryLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrLiteral.left=current}
		public Action getOrLiteralLeftAction_1_0() { return cOrLiteralLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=PrimaryLiteral
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryLiteral
		public RuleCall getRightPrimaryLiteralParserRuleCall_1_2_0() { return cRightPrimaryLiteralParserRuleCall_1_2_0; }
	}
	public class PrimaryLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.PrimaryLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConfslitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConfslitConfigLiteralParserRuleCall_0_0 = (RuleCall)cConfslitAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PrimaryLiteral KconfigExpr:
		//	confslit+=ConfigLiteral |
		//	'!'? '(' Expr ')'
		@Override public ParserRule getRule() { return rule; }
		
		//confslit+=ConfigLiteral | '!'? '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//confslit+=ConfigLiteral
		public Assignment getConfslitAssignment_0() { return cConfslitAssignment_0; }
		
		//ConfigLiteral
		public RuleCall getConfslitConfigLiteralParserRuleCall_0_0() { return cConfslitConfigLiteralParserRuleCall_0_0; }
		
		//'!'? '(' Expr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_2() { return cExprParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class ConfigLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.ConfigLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConfAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cConfConfigCrossReference_0_1_0 = (CrossReference)cConfAssignment_0_1.eContents().get(0);
		private final RuleCall cConfConfigIDTerminalRuleCall_0_1_0_1 = (RuleCall)cConfConfigCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_2_0 = (Alternatives)cGroup_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2_0_0 = (Keyword)cAlternatives_0_2_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_0_2_0_1 = (Keyword)cAlternatives_0_2_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final Keyword cYKeyword_0_2_1_0 = (Keyword)cAlternatives_0_2_1.eContents().get(0);
		private final Keyword cMKeyword_0_2_1_1 = (Keyword)cAlternatives_0_2_1.eContents().get(1);
		private final Keyword cNKeyword_0_2_1_2 = (Keyword)cAlternatives_0_2_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_2_1_3 = (RuleCall)cAlternatives_0_2_1.eContents().get(3);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//ConfigLiteral:
		//	'!'? conf=[Config] (('=' | '!=') ('y' | 'm' | 'n' | INT))? | string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'!'? conf=[Config] (('=' | '!=') ('y' | 'm' | 'n' | INT))? | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'!'? conf=[Config] (('=' | '!=') ('y' | 'm' | 'n' | INT))?
		public Group getGroup_0() { return cGroup_0; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }
		
		//conf=[Config]
		public Assignment getConfAssignment_0_1() { return cConfAssignment_0_1; }
		
		//[Config]
		public CrossReference getConfConfigCrossReference_0_1_0() { return cConfConfigCrossReference_0_1_0; }
		
		//ID
		public RuleCall getConfConfigIDTerminalRuleCall_0_1_0_1() { return cConfConfigIDTerminalRuleCall_0_1_0_1; }
		
		//(('=' | '!=') ('y' | 'm' | 'n' | INT))?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//('=' | '!=')
		public Alternatives getAlternatives_0_2_0() { return cAlternatives_0_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2_0_0() { return cEqualsSignKeyword_0_2_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_0_2_0_1() { return cExclamationMarkEqualsSignKeyword_0_2_0_1; }
		
		//('y' | 'm' | 'n' | INT)
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }
		
		//'y'
		public Keyword getYKeyword_0_2_1_0() { return cYKeyword_0_2_1_0; }
		
		//'m'
		public Keyword getMKeyword_0_2_1_1() { return cMKeyword_0_2_1_1; }
		
		//'n'
		public Keyword getNKeyword_0_2_1_2() { return cNKeyword_0_2_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2_1_3() { return cINTTerminalRuleCall_0_2_1_3; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	public class SIGNED_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.SIGNED_INT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SIGNED_INT:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final ChoiceElements pChoice;
	private final ImportElements pImport;
	private final QualifiedNameElements pQualifiedName;
	private final ConfigElements pConfig;
	private final TypeElements pType;
	private final DependencyElements pDependency;
	private final SelectElements pSelect;
	private final DefaultElements pDefault;
	private final PromptElements pPrompt;
	private final RangeElements pRange;
	private final ExprElements pExpr;
	private final NeqLiteralElements pNeqLiteral;
	private final SecondaryLiteralElements pSecondaryLiteral;
	private final AndLiteralElements pAndLiteral;
	private final OrLiteralElements pOrLiteral;
	private final PrimaryLiteralElements pPrimaryLiteral;
	private final ConfigLiteralElements pConfigLiteral;
	private final TerminalRule tID;
	private final TerminalRule tHEX_TERMINAL;
	private final TerminalRule tKCONFIG_HELP;
	private final TerminalRule tSL_COMMENT;
	private final SIGNED_INTElements pSIGNED_INT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KconfigGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pChoice = new ChoiceElements();
		this.pImport = new ImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pConfig = new ConfigElements();
		this.pType = new TypeElements();
		this.pDependency = new DependencyElements();
		this.pSelect = new SelectElements();
		this.pDefault = new DefaultElements();
		this.pPrompt = new PromptElements();
		this.pRange = new RangeElements();
		this.pExpr = new ExprElements();
		this.pNeqLiteral = new NeqLiteralElements();
		this.pSecondaryLiteral = new SecondaryLiteralElements();
		this.pAndLiteral = new AndLiteralElements();
		this.pOrLiteral = new OrLiteralElements();
		this.pPrimaryLiteral = new PrimaryLiteralElements();
		this.pConfigLiteral = new ConfigLiteralElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.ID");
		this.tHEX_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.HEX_TERMINAL");
		this.tKCONFIG_HELP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.KCONFIG_HELP");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fmautorepair.Kconfig.SL_COMMENT");
		this.pSIGNED_INT = new SIGNED_INTElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fmautorepair.Kconfig".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(Choices+=Choice | Sources+=Import | configs+=Config)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Choice:
	//	Choice='choice' configs+=Config+ 'endchoice';
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//Import:
	//	'source' importedNamespace+=QualifiedName;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedName:
	//	ID '.Kconfig';
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Config:
	//	'config' name=ID (type=Type & prompts+=Prompt? & ranges+=Range* & dependencies+=Dependency* & selects+=Select* &
	//	defaults+=Default*) KCONFIG_HELP?;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//Type:
	//	type='string' tprompt=STRING? | type=('bool' | 'tristate' | 'int' | 'hex') tprompt=STRING? ('if' KconfigExpr=Expr)? |
	//	type=('def_bool' | 'def_tristate') def=Expr ('if' KconfigExpr=Expr)?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Dependency:
	//	'depends on' deps=Expr;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//Select:
	//	'select' select=[Config] ('if' Expr=Expr)?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Default:
	//	'default' (value=Expr | trival=('n' | 'm' | 'y') | hex=HEX_TERMINAL | int=INT) ('if' KconfigExpr=Expr)?;
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}
	
	//Prompt:
	//	'prompt' value=STRING ('if' KconfigExpr=Expr)?;
	public PromptElements getPromptAccess() {
		return pPrompt;
	}
	
	public ParserRule getPromptRule() {
		return getPromptAccess().getRule();
	}
	
	////
	//Range:
	//	'range' ((ifrom=SIGNED_INT | iconfrom=[Config]) (ito=SIGNED_INT | iconfto=[Config]) | hfrom=HEX_TERMINAL
	//	hto=HEX_TERMINAL) ('if' KconfigExpr=Expr)?;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Expr KconfigExpr:
	//	NeqLiteral ({Expr.left=current} '=' right=NeqLiteral)*
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//NeqLiteral KconfigExpr:
	//	SecondaryLiteral ({NeqLiteral.left=current} '!=' right=SecondaryLiteral)*
	public NeqLiteralElements getNeqLiteralAccess() {
		return pNeqLiteral;
	}
	
	public ParserRule getNeqLiteralRule() {
		return getNeqLiteralAccess().getRule();
	}
	
	//SecondaryLiteral KconfigExpr:
	//	AndLiteral
	public SecondaryLiteralElements getSecondaryLiteralAccess() {
		return pSecondaryLiteral;
	}
	
	public ParserRule getSecondaryLiteralRule() {
		return getSecondaryLiteralAccess().getRule();
	}
	
	//AndLiteral KconfigExpr:
	//	OrLiteral ({AndLiteral.left=current} '&&' right=OrLiteral)*
	public AndLiteralElements getAndLiteralAccess() {
		return pAndLiteral;
	}
	
	public ParserRule getAndLiteralRule() {
		return getAndLiteralAccess().getRule();
	}
	
	//OrLiteral KconfigExpr:
	//	PrimaryLiteral ({OrLiteral.left=current} '||' right=PrimaryLiteral)*
	public OrLiteralElements getOrLiteralAccess() {
		return pOrLiteral;
	}
	
	public ParserRule getOrLiteralRule() {
		return getOrLiteralAccess().getRule();
	}
	
	//PrimaryLiteral KconfigExpr:
	//	confslit+=ConfigLiteral |
	//	'!'? '(' Expr ')'
	public PrimaryLiteralElements getPrimaryLiteralAccess() {
		return pPrimaryLiteral;
	}
	
	public ParserRule getPrimaryLiteralRule() {
		return getPrimaryLiteralAccess().getRule();
	}
	
	//ConfigLiteral:
	//	'!'? conf=[Config] (('=' | '!=') ('y' | 'm' | 'n' | INT))? | string=STRING;
	public ConfigLiteralElements getConfigLiteralAccess() {
		return pConfigLiteral;
	}
	
	public ParserRule getConfigLiteralRule() {
		return getConfigLiteralAccess().getRule();
	}
	
	//terminal ID:
	//	'1'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' ('A'..'Z' | 'a'..'z' | '_') ('a'..'z' | '0'..'9' | 'A'..'Z' | '_')* |
	//	'1'..'9' '0'..'9' '0'..'9' '0'..'9' ('A'..'Z' | 'a'..'z' | '_') ('a'..'z' | '0'..'9' | 'A'..'Z' | '_')* | '0'..'9'
	//	'0'..'9' '0'..'9' ('A'..'Z' | 'a'..'z' | '_') ('a'..'z' | '0'..'9' | 'A'..'Z' | '_')* | '1'..'9' '0'..'9' ('A'..'Z' |
	//	'a'..'z' | '_') ('a'..'z' | '0'..'9' | 'A'..'Z' | '_')* | '1'..'9' ('A'..'Z' | 'a'..'z' | '_') ('a'..'z' | '0'..'9' |
	//	'A'..'Z' | '_')* | ('A'..'Z' | 'a'..'z') ('a'..'z' | '0'..'9' | 'A'..'Z' | '_')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal HEX_TERMINAL:
	//	'0x' ('0'..'9' | 'a'..'f' | 'A'..'F')*;
	public TerminalRule getHEX_TERMINALRule() {
		return tHEX_TERMINAL;
	}
	
	//terminal KCONFIG_HELP:
	//	'---help---'->"\n\n";
	public TerminalRule getKCONFIG_HELPRule() {
		return tKCONFIG_HELP;
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//SIGNED_INT:
	//	'-'? INT;
	public SIGNED_INTElements getSIGNED_INTAccess() {
		return pSIGNED_INT;
	}
	
	public ParserRule getSIGNED_INTRule() {
		return getSIGNED_INTAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
