grammar fmautorepair.Kconfig with org.eclipse.xtext.common.Terminals

generate kconfig "http://www.Kconfig.fmautorepair"

Model:
    (Choices += Choice | Sources += Import | configs += Config)*;

Choice:
    Choice= 'choice' configs += Config+ 'endchoice'
;

Import:
    'source' importedNamespace += QualifiedName;

QualifiedName:
    ID '.Kconfig';

Config:
    'config' name= ID
    (type = Type                   &
     prompts += Prompt?             &
     ranges += Range*              &
     dependencies += Dependency* &
     selects += Select*             &
     defaults += Default*)
      KCONFIG_HELP?
;

Type:
    type= 'string' tprompt=STRING?  |
    type=('bool'|'tristate'|'int'|'hex') tprompt=STRING? ('if' KconfigExpr=Expr)?  |
    type=('def_bool'|'def_tristate') def=Expr ('if' KconfigExpr=Expr)?
;

Dependency:
    'depends on' deps = Expr
;

Select:
    'select' select = [Config] ('if' Expr = Expr)?
;

Default:
    'default' (value=Expr|trival=('n'|'m'|'y')|hex=HEX_TERMINAL|int=INT) ('if' KconfigExpr = Expr)?
;

Prompt:
    'prompt' value=STRING ('if' KconfigExpr = Expr)?
;

//
Range:
    'range' ((ifrom=SIGNED_INT|iconfrom=[Config]) (ito=SIGNED_INT|iconfto=[Config]) |
            hfrom=HEX_TERMINAL hto=HEX_TERMINAL) ('if' KconfigExpr = Expr)?
;


Expr returns KconfigExpr:
    NeqLiteral ({Expr.left=current} '=' right=NeqLiteral)*
;

NeqLiteral returns KconfigExpr:
    SecondaryLiteral ({NeqLiteral.left=current} '!=' right=SecondaryLiteral)*
;

SecondaryLiteral returns KconfigExpr:
    AndLiteral
;

AndLiteral returns KconfigExpr:
    OrLiteral ({AndLiteral.left=current}'&&' right=OrLiteral)*
;

OrLiteral returns KconfigExpr:
    PrimaryLiteral ({OrLiteral.left=current} '||' right=PrimaryLiteral)*
;


PrimaryLiteral returns KconfigExpr:
    confslit += ConfigLiteral |
    '!'?'(' Expr ')'
;

ConfigLiteral:
    '!'? conf = [Config] (('='|'!=')('y'|'m'|'n'|INT))?| string = STRING
;


terminal ID:
    ('1'..'9')('0'..'9')('0'..'9')('0'..'9')('0'..'9')(('A'..'Z')|('a'..'z')|'_')
        (('a'..'z')|('0'..'9')|('A'..'Z')|'_'
    )* |

     ('1'..'9')('0'..'9')('0'..'9')('0'..'9') (('A'..'Z')|('a'..'z')|'_') (('a'..'z')|
         ('0'..'9')|('A'..'Z')|'_'
     )* |

    ('0'..'9')('0'..'9')('0'..'9') (('A'..'Z')|('a'..'z')|'_') (('a'..'z')|('0'..'9')|
        ('A'..'Z')|'_'
    )* |

     ('1'..'9')('0'..'9')   (('A'..'Z')|('a'..'z')|('_'))
         (('a'..'z')|('0'..'9')|('A'..'Z')|'_'
     )* |

    ('1'..'9')   (('A'..'Z')|('a'..'z')|('_'))   (('a'..'z')|('0'..'9')|('A'..'Z')|'_')* |

    (('A'..'Z')|('a'..'z'))   (('a'..'z')|('0'..'9')|('A'..'Z')|'_')*;

terminal HEX_TERMINAL: '0x'('0'..'9'|'a'..'f'|'A'..'F')*;
terminal KCONFIG_HELP: '---help---' -> "\n\n";
terminal SL_COMMENT: '#' !('\n'|'\r')* ('\r'? '\n')?;
SIGNED_INT: ('-')? INT;